@page "/upload-pdf"
@layout AdminLayout
@using Microsoft.EntityFrameworkCore
@using NetcodeHub.Packages.Components.FileUpload
@using NetcodeHub.Packages.Components.Toast
@using SchoolWebApp.Data
@using Syncfusion.Blazor.SfPdfViewer
@rendermode InteractiveServer
@inject ApplicationDbContext context
<PageTitle>Upload PDF</PageTitle>
<div class="container-fluid">
    <div class="row mt-3">
        <div class="col-lg-12 col-md-12 col-sm-12 ">
            <EditForm Model="uploadFileName" OnValidSubmit="SaveFile">
                <div class="card">
                    <div class="card-header d-flex justify-content-evenly">
                        <NetcodeHubFileUpload Multiple="true" RequiredExtensions="Extension" ShowDisplay="true" CssClass="form-control form-select d-flex" Notify="RetrievePDFFile" />
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <select class="form-control" @onchange="OnSelectionChanged">
                                <option value="">-- Select an option --</option>
                                <option value="volley">Volley</option>
                                <option value="tennis">Tennis</option>

                            </select>
                        </div>
                    </div>
                    <div class="card-footer">
                        <button class="btn btn-primary btn-lg" type="submit">Upload</button>
                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-lg-12 col-md-12 mt-3">
            <div class="card">
                <div class="card-header">
                    Available Files | Volley & Tennis
                </div>
                <div class="container-fluid">
                    <div class="row">
                        @if (GetPDFFileData != null || GetPDFFileData!.Count != 0)
                        {
                            @foreach (var file in GetPDFFileData)
                            {
                                <div class="card col-lg-3 col-md-4 col-sm-12">
                                    <div class="card-header">
                                        @file.OriginalName
                                        <a class="btn btn-link text-danger float-end" @onclick="(async ()=>await Delete(file))">Delete</a>
                                    </div>
                                    <SfPdfViewer2 DocumentPath="@($"wwwroot/{file.FileLink}")" Height="640px" Width="100%"></SfPdfViewer2>
                                </div>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<NetcodeHubToast @ref="Toast"
                 Position="@ToastPosition.Bottom()"
                 IconClass="bi bi-check"
                 Persist="true"
                 Duration=4000 />

@code {
    UploadFileName uploadFileName = new();
    NetcodeHubToast? Toast;
    List<string> Extension = [".pdf"];
    HashSet<IBrowserFile> SelectedPDFFiles = [];
    List<UploadFileName> GetPDFFileData = [];
    protected override async Task OnInitializedAsync() => await GetPDFFiles();
    

    private void OnSelectionChanged(ChangeEventArgs e)
    {
        string selected = e.Value!.ToString()!;
        if (!string.IsNullOrWhiteSpace(selected))
        {
            if (selected.ToLower().Equals("volley"))
                uploadFileName.IsVolley = true;
            else
                uploadFileName.IsTennis = true;
        }
    }
    private async Task RetrievePDFFile(NetcodeHubUploadModel model)
    {
        if (!string.IsNullOrEmpty(model.Message))
        {
            await Toast!.ShowErrorToast("Alert", model.Message);
            return;
        }
        SelectedPDFFiles = model.FileModel!.IBrowserFiles!.ToHashSet();
    }

    async Task SaveFile()
    {
        if (uploadFileName.IsTennis == false && uploadFileName.IsVolley == false)
        {
            await Toast!.ShowErrorToast("Alert", "Kindly select file type");
            return;
        }


        if (!SelectedPDFFiles.Any())
        {
            await Toast!.ShowErrorToast("Alert", "Kindly select file");
            return;
        }

        List<UploadFileName> pdfFileNames = [];
        foreach (var file in SelectedPDFFiles)
        {
            // Set up a unique file name and path
            var originalFileName = Path.GetFileNameWithoutExtension(file.Name).Replace(" ", "_").TrimEnd();
            var GeneratedFileName = originalFileName + "_" + Guid.NewGuid().ToString() + Path.GetExtension(file.Name);
            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "PDFs", GeneratedFileName);


            var maxFileSize = 104857600;

            // Save the file to the server (wwwroot/PDFs folder)
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await file.OpenReadStream(maxFileSize).CopyToAsync(stream);
                // Generate the relative path to the video
                uploadFileName.OriginalName = originalFileName;
                uploadFileName.GeneratedName = GeneratedFileName;
                uploadFileName.FileLink = $"/PDFs/{GeneratedFileName}";
                uploadFileName.IsPdf = true;
                pdfFileNames!.Add(uploadFileName);
            }
        }
        await CommitToDatabase(pdfFileNames);

    }

    async Task CommitToDatabase(List<UploadFileName> pdfFiles)
    {
        context.UploadedFileNames.AddRange(pdfFiles!);
        await context.SaveChangesAsync();
        await GetPDFFiles();
        SelectedPDFFiles?.Clear();
        await Toast!.ShowSuccessToast("Information", "PDF file saved successfully");
    }

    private async Task GetPDFFiles() => GetPDFFileData = await context.UploadedFileNames.AsNoTracking().Where(x => x.IsPdf).ToListAsync();

    async Task Delete(UploadFileName file)
    {
        var _file = await context.UploadedFileNames.FirstOrDefaultAsync(_ => _.Id == file.Id);
        context.UploadedFileNames.Remove(_file!);
        await context.SaveChangesAsync();
        await GetPDFFiles();

        var filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "PDFs", file.GeneratedName!);
        if (File.Exists(filePath))
        {
            File.Delete(filePath);
        }
    }
}
